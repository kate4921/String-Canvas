//// This file is part of OpenCV project.
//// It is subject to the license terms in the LICENSE file found in the top-level directory
//// of this distribution and at http://opencv.org/license.html.
//
////
//// Notes about integration OpenCV into existed Android Studio application project are below (application 'app' module should exist).
////
//// This file is located in <OpenCV-android-sdk>/sdk directory (near 'etc', 'java', 'native' subdirectories)
////
//// Add module into Android Studio application project:
////
//// - Android Studio way:
////   (will copy almost all OpenCV Android SDK into your project, ~200Mb)
////
////   Import module: Menu -> "File" -> "New" -> "Module" -> "Import Gradle project":
////   Source directory: select this "sdk" directory
////   Module name: ":opencv"
////
//// - or attach library module from OpenCV Android SDK
////   (without copying into application project directory, allow to share the same module between projects)
////
////   Edit "settings.gradle" and add these lines:
////
////   def opencvsdk='<path_to_opencv_android_sdk_rootdir>'
////   // You can put declaration above into gradle.properties file instead (including file in HOME directory),
////   // but without 'def' and apostrophe symbols ('): opencvsdk=<path_to_opencv_android_sdk_rootdir>
////   include ':opencv'
////   project(':opencv').projectDir = new File(opencvsdk + '/sdk')
////
////
////
//// Add dependency into application module:
////
//// - Android Studio way:
////   "Open Module Settings" (F4) -> "Dependencies" tab
////
//// - or add "project(':opencv')" dependency into app/build.gradle:
////
////   dependencies {
////       implementation fileTree(dir: 'libs', include: ['*.jar'])
////       ...
////       implementation project(':opencv')
////   }
////
////
////
//// Load OpenCV native library before using:
////
//// - avoid using of "OpenCVLoader.initAsync()" approach - it is deprecated
////   It may load library with different version (from OpenCV Android Manager, which is installed separatelly on device)
////
//// - use "System.loadLibrary("opencv_java4")" or "OpenCVLoader.initDebug()"
////   TODO: Add accurate API to load OpenCV native library
////
////
////
//// Native C++ support (necessary to use OpenCV in native code of application only):
////
//// - Use find_package() in app/CMakeLists.txt:
////
////   find_package(OpenCV 4.11 REQUIRED java)
////   ...
////   target_link_libraries(native-lib ${OpenCV_LIBRARIES})
////
//// - Add "OpenCV_DIR" and enable C++ exceptions/RTTI support via app/build.gradle
////   Documentation about CMake options: https://developer.android.com/ndk/guides/cmake.html
////
////   defaultConfig {
////       ...
////       externalNativeBuild {
////           cmake {
////               cppFlags "-std=c++11 -frtti -fexceptions"
////               arguments "-DOpenCV_DIR=" + opencvsdk + "/sdk/native/jni" // , "-DANDROID_ARM_NEON=TRUE"
////           }
////       }
////   }
////
//// - (optional) Limit/filter ABIs to build ('android' scope of 'app/build.gradle'):
////   Useful information: https://developer.android.com/studio/build/gradle-tips.html (Configure separate APKs per ABI)
////
////   splits {
////       abi {
////           enable true
////           universalApk false
////           reset()
////           include 'armeabi-v7a' // , 'x86', 'x86_64', 'arm64-v8a'
////       }
////   }
////
//

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
//try {
//    apply plugin: 'kotlin-android'
//    println "Configure OpenCV with Kotlin"
//} catch (Exception e) {
//    println "Configure OpenCV without Kotlin"
//}

// Версии OpenCV
def openCVersionName = "4.11.0"
def openCVersionCode = ((4 * 100 + 11) * 100 + 0) * 10 + 0

println "OpenCV: " + openCVersionName + " " + project.buildscript.sourceFile

android {
    // Стандартные параметры для Android Library
    namespace 'org.opencv'
    compileSdk 35

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 35

        versionCode openCVersionCode
        versionName openCVersionName

        // Настройки сборки native-кода
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                targets "opencv_jni_shared"
            }
        }
    }

    // Можно убрать дублирующийся блок "android { buildFeatures { ... } }"
    // и перенести в этот общий раздел:
    buildFeatures {
        buildConfig = true      // или buildConfig true
        prefabPublishing = true // если нужно публиковать Prefab
    }

    // Указываем, под какую версию Java компилировать
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // Обязательно выставляем такой же jvmTarget, что и в модуле :app
//    kotlinOptions {
//        jvmTarget = "11"
//    }

    // Сами типы сборок
    buildTypes {
        debug {
            packagingOptions {
                doNotStrip '**/*.so'  // controlled by OpenCV CMake scripts
            }
        }
        release {
            packagingOptions {
                doNotStrip '**/*.so'
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    // Настройка путей к исходникам и ресурсам OpenCV
    sourceSets {
        main {
            jniLibs.srcDirs = ['native/libs']
            java.srcDirs = ['java/src']
            res.srcDirs = ['java/res']
            manifest.srcFile 'java/AndroidManifest.xml'
        }
    }

    externalNativeBuild {
        cmake {
            // Путь к файлу CMakeLists.txt
            path (project.projectDir.toString() + '/libcxx_helper/CMakeLists.txt')
        }
    }

    // Настройки Prefab для доступа к include-файлам
    prefab {
        opencv_jni_shared {
            headers 'native/jni/include'
        }
    }

    // Параметры публикации (если хотите выпускать в Maven)
    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }

    // Версия NDK, которую вы используете
    ndkVersion '25.1.8937393'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'org.opencv'
            artifactId = 'opencv'
            version = '4.11.0'

            afterEvaluate {
                from components.release
            }
        }
    }
    repositories {
        maven {
            name = 'myrepo'
            url = "${project.buildDir}/repo"
        }
    }
}

dependencies {
    // Обычно OpenCV-модуль не требует дополнительных зависимостей,
    // но если нужно — указывайте здесь
}

//apply plugin: 'com.android.library'
//apply plugin: 'maven-publish'
//try {
//    apply plugin: 'kotlin-android'
//    println "Configure OpenCV with Kotlin"
//} catch (Exception e) {
//    println "Configure OpenCV without Kotlin"
//}
//
//def openCVersionName = "4.11.0"
//def openCVersionCode = ((4 * 100 + 11) * 100 + 0) * 10 + 0
//
//println "OpenCV: " +openCVersionName + " " + project.buildscript.sourceFile
//
//android {
//    namespace 'org.opencv'
//    compileSdk 35
//
//    defaultConfig {
//        minSdkVersion 26
//        targetSdkVersion 35
//
//        versionCode openCVersionCode
//        versionName openCVersionName
//
//        externalNativeBuild {
//            cmake {
//                arguments "-DANDROID_STL=c++_shared"
//                targets "opencv_jni_shared"
//            }
//        }
//    }
//
//    android {
//        buildFeatures {
//            buildConfig true
//        }
//    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_17
//        targetCompatibility JavaVersion.VERSION_17
//    }
//
//    kotlinOptions {
//        jvmTarget = "17"
//    }
//
//    buildTypes {
//        debug {
//            packagingOptions {
//                doNotStrip '**/*.so'  // controlled by OpenCV CMake scripts
//            }
//        }
//        release {
//            packagingOptions {
//                doNotStrip '**/*.so'  // controlled by OpenCV CMake scripts
//            }
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
//        }
//    }
//
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['native/libs']
//            java.srcDirs = ['java/src']
//            res.srcDirs = ['java/res']
//            manifest.srcFile 'java/AndroidManifest.xml'
//        }
//    }
//
//    externalNativeBuild {
//        cmake {
//            path (project.projectDir.toString() + '/libcxx_helper/CMakeLists.txt')
//        }
//    }
//
//    buildFeatures {
//        prefabPublishing true
//        buildConfig true
//    }
//
//    prefab {
//        opencv_jni_shared {
//            headers 'native/jni/include'
//        }
//    }
//
//    publishing {
//        singleVariant('release') {
//            withSourcesJar()
//            withJavadocJar()
//        }
//    }
//    ndkVersion '25.1.8937393'
//
//}
//
//publishing {
//    publications {
//        release(MavenPublication) {
//            groupId = 'org.opencv'
//            artifactId = 'opencv'
//            version = '4.11.0'
//
//            afterEvaluate {
//               from components.release
//           }
//        }
//    }
//    repositories {
//        maven {
//            name = 'myrepo'
//            url = "${project.buildDir}/repo"
//        }
//    }
//}
//
//dependencies {
//}
